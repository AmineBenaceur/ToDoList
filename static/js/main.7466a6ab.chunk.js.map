{"version":3,"sources":["components/layout/ToDoHeader.js","components/ToDoItem.js","components/Todos.js","components/AddToDo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["ToDoHeader","react_default","a","createElement","style","headerStyle","react_router_dom","linkStyle","to","color","textDecoration","background","textAlign","padding","ToDoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","props","todo","completed","completedStyle","notCompletedStyle","inherits","createClass","key","value","_this$props$todo","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","borderBottom","Todos","todos","map","components_ToDoItem","React","AddToDo","state","onChangeMethod","e","setState","target","onSubmit","preventDefault","addToDo","display","name","placeholder","flex","className","About","Fragment","App","axios","delete","toConsumableArray","filter","post","then","res","data","_this2","get","_this3","console","log","class","react_router","exact","path","render","components_AddToDo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7466a6ab.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\nexport default function ToDoHeader() {\n  return (\n    <div>\n      <header style={headerStyle}>\n          <h1> ToDoList </h1>\n          <Link style={linkStyle} to=\"/\" >Home  </Link>  |\n          <Link style={linkStyle} to=\"/about\" >  About </Link>\n      </header>\n    </div>\n  )\n}\n\nconst linkStyle = {\n  color: '#fff',\n  textDecoration: 'none'\n}\nconst headerStyle = {\n    color: '#fff',\n    background: '#333',\n    textAlign: 'center',\n    padding: '10px'\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport Todos from './Todos'\n\nexport class ToDoItem extends Component {\n    //function to get the style of the ToDoItem depending if completed or not\n    getStyle = () => {\n        if(this.props.todo.completed){\n            return completedStyle;\n        }else{\n            return notCompletedStyle;\n        }\n    }\n\n\n  render() {\n      const{id,title} = this.props.todo; // use this instead of specifying every time\n    return (\n      <div style={this.getStyle()}>\n        <h3> \n        <input type=\"checkBox\" onChange = {this.props.markComplete.bind(this,id)} ></input> \n        {'  '} \n        {title} \n        <button onClick={this.props.delTodo.bind(this,id )} style={btnStyle}> x </button> \n        </h3>\n      </div>\n    )\n  }\n}\n\n//proptypes for arguments\nToDoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\nconst btnStyle= {\n    background: '#ff0000', //red\n    color: \"fff\", //white\n    border: 'none',\n    padding: '5px 9px', // 5px for top/bottom, 10px for left right\n    borderRadius: '50%', //make it round\n    cursor: 'pointer', //makes the mouse a hand-click thing\n    float: 'right' //pushes it to the right\n\n}\nconst completedStyle = { \n    background: '#f4f4f4',\n    padding: '10px',\n    borderBottom: '1px #ccc dotted',\n    textDecoration: 'line-through' \n}\nconst notCompletedStyle = {\n    background: '#e3f7e1',\n    padding: '10px',\n    borderBottom: '1px #ccc dotted',\n    textDecoration: 'none' \n}\n\n\n\nexport default ToDoItem\n","import React from 'react';\nimport ToDoItem from './ToDoItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends React.Component {\n    \n  constructor(props) {\n    super(props);\n  }\n\n\n\n  render() {\n    \n    return this.props.todos.map((todo)  => (//pretty much a foreach, todo is the variable name\n        <ToDoItem key= {todo.id} todo = {todo} markComplete={this.props.markComplete} delTodo = {this.props.delTodo} />\n    ));\n  }\n}\n//proptypes for arguments\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\nexport default Todos;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport class AddToDo extends Component {\n\n    state = {\n        title: ''\n    }\n\n    onChangeMethod = (e) => this.setState({title: e.target.value});\n    \n    onSubmit= (e) => {\n        e.preventDefault(); //prevent default action\n        this.props.addToDo(this.state.title);\n        this.setState({ title:''}); //resets state after\n    }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.onSubmit} style={{ display : 'flex'}}> \n            <input type=\"text\" \n            name=\"title\" \n            placeholder=\"Add To Do... \"\n            style={{flex : '10', padding: '5px' }}\n            value= {this.state.title}\n            onChange={this.onChangeMethod}\n            />  \n\n            <input type=\"submit\"\n            value=\"Submit\"\n            className=\"btn\" \n            style={{flex : '1'}}  \n            />\n         </form> \n      </div>\n    )\n  }\n}\n\n//proptypes for arguments\nAddToDo.propTypes = {\n  AddToDo: PropTypes.func.isRequired,\n\n}\n\nexport default AddToDo\n","import React from 'react'\n\nexport default function About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p> This is a ToDoList Application, built in the Javascript library React by Amine Benaceur. Enjoy :) </p>\n    </React.Fragment>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport ToDoHeader from './components/layout/ToDoHeader'\nimport Todos from './components/Todos'\nimport AddToDo from './components/AddToDo'\nimport About from './components/pages/About'\nimport uuid from 'uuid';\nimport axios from 'axios';\n/* eslint-disable-line */\nclass App extends React.Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({todos: res.data}));\n  }\n\n\n  constructor(props) {\n    super(props);\n  }\n  // Listener for marking todos complete and incomplete by toggle\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n\n      if( todo.id === id){\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })});\n  }\n//loops to find and delete TODO\n  delTodo = (id) => {\n  //  axios.delete()\n    axios.delete('https://jsonplaceholder.typicode.com/todos' ,{todo: { id: id} });\n    this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id) ]}); // deletes Todo by filtering out selected TODOItem\n\n  }\n  addToDo = (title) => {\n    // const newTodo = { \n    //   id: uuid.v4(),\n    //   title: title,\n    //   completed: false\n    //  };\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title:title,\n      completed:false\n    })\n    .then(res => this.setState( {todos: [...this.state.todos, res.data ]} ) ); // this operater copies old state and adds item to it\n  }\n\n  render() {\n    console.log(this.state.todos)\n    return (\n      //passing in the array to the TODOS component in ./components/todos as a prop\n      <Router>\n        <div className=\"App\">\n          <div class=\"container\" >\n            <ToDoHeader /> \n            <Route exact path=\"/todo/\" render={ props => (\n              <React.Fragment>\n                <AddToDo addToDo={this.addToDo} />\n                <Todos todos= {this.state.todos} markComplete={this.markComplete}  delTodo={this.delTodo} />\n              </React.Fragment>\n            )}/> \n            <Route path=\"todo/about\" component={About}  />\n          </div>\n        </div>\n      </Router>\n   \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}